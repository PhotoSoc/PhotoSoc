if(typeof process !== 'undefined') {
	var vm = require("vm"),
	Q = require("q");
	require("sugar");
} else {
	var vm = {
		createScript: function(str) {
			var out = new Function("","return (function(){"+str+"}());");
			out.runInNewContext = function(env) {
				var keys = Object.keys(env),
				vals = Object.values(env);

				var str = "return ("+this.toString()+"());";
				return (new Function(keys.join(","),str)).apply(null,vals);
			};
			return out;
		}
	};
}

var Tmpl = (function() {
	function encode(str) {
		return str.toString()
		.replace(/&(?!\w+;)/g, '&#38;')
		.split('<').join('&#60;').split('>').join('&#62;')
		.split('"').join('&#34;').split("'").join('&#39;');
	}

	var jqotecache = {};
	return {
		UNDEF_ERROR:'UndefinedTemplateError',
		COMP_ERROR:'TemplateCompilationError',
		EXEC_ERROR:'TemplateExecutionError',
		compile: function(tmpl,file) {
			var cache, str = '', arr = [], promises = [];

			if (cache = jqotecache[tmpl]) return cache;

			arr = tmpl.replace(/\s*<!\[CDATA\[\s*|\s*\]\]>\s*|[\r\t]/g, '')
			.split('{{').join('}}\x1b')
			.split('}}');

			for(var m=0,l=arr.length; m < l; ++m) {
				var chunk = arr[m];
				if(chunk.charAt(0) === '\x1b') {
					switch(chunk.charAt(1)) {
					case "=":
						promises.push(vm.createScript(chunk.substr(2)));
					break;
					case "!":
						promises.push(vm.createScript('encode((' + chunk.substr(2) + '))'));
					break;
					default:
						promises.push(vm.createScript("(function(){"+
							chunk.substr(1)
							+"}());"));
					}
				} else {
					promises.push(
						chunk.replace(/\n/g,"\\n\\\n")
						     .replace(/(\\([^n\n])|["'])/g, '\\$1$2')
					);
				}
			}
			str = ('var out="";'+str+';out;')
					.split("out+='';").join('')
					.split("out+='\\n\\\n").join("out+='")
						.split('var out="";out+=').join('var out=');
			return promises;
			var fn;
			try {
				fn = vm.createScript(str,file);
			} catch(e) {
				e.template = str;
				throw e;
			}
			return jqotecache[tmpl] = fn;
		}
	};
}());

if(typeof module !== 'undefined')
	module.exports = Tmpl;
function eventualAdd(a, b) {
	return a.then(function (a) {
		return b.then(function (b) {
			return a + b;
		});
	});
}
if(require.main && module.id == require.main.id) {
	var ctx = {hello:"world",Q:Q,setTimeout:setTimeout};

	Q.all(Tmpl.compile("hello\n\
	{{=hello.toUpperCase()+'!'}}\n\
	{{\
	var d = Q.defer();\
	setTimeout(function() {\
		d.resolve('rsnt');\
	},1000);\
	return d.promise;\
	}}").map(function(promise) {
			var out;
			if(promise.call) {
				out = Q.call(promise,ctx);
			} else if(promise.runInNewContext) {
				out = promise.runInNewContext(ctx);
			} else {
				out = promise.toString();
			}
			return Q.when(out);
	})).spread(function(){
		var o = '';
		for(var i = 0,l = arguments.length; i<l; ++i) {
			o += arguments[i];
		}
		return o;
	}).then(console.log).end();
}