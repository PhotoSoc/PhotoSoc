exports.template = function($) ["base",<>
<article>
<header>
<h1>Some content</h1>
</header>
λ-calculus is a system for expressing functions and recursion, first developed in the early
1930s by the American logician Alonzo Church. λ-calculus has the same computational power
as Turing machines; consequently, any recursive algorithm can be represented in λ-calculus.
It has numerous applications in both formal logic and computer science; notably, it was the
original inspiration for functional programming languages such as Lisp and Scheme and
their descendants1 . The two major variants of λ-calculus are typed and untyped: in the former,
variables are labeled based on the type of date (e.g. text, number, boolean) they may contain.
Typed lambda calculus does not have the computational power of untyped, but is nonetheless
useful; the type systems in programming languages such as C and Java are indirectly based
on typed λ-calculus. This essay will focus solely on untyped λ-calculus.
</article>
<aside>
<h1>What's happening</h1>
</aside>
<aside>
<h1>Recent posts</h1>
</aside>
</>]